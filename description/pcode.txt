int main()
{
    // staffCount ,dayCount ,shiftCount, vacationCount, noVacationWeight, overTimeWeight, vacationRequestCount
    
    // [shift:[0 or 1]]
    int shiftTime[30][24];

    // [day:[demand1, demand2,...,demand24]]
    workerDemand[31][24]

    // [[staff, day]]
    int vacationRequest[3100][2];

    // [[staff, shift]]
    int workSchedule[100][31];

    // [days the worker has worked]
    int workDays[100] = {0}

    ================================================================================================

    for (day, i)
    {
        int demand[24] = [today's worker demand in different time] 
        int demandCount = total worker demand

        // day is even -> forwrd(j++), day is odd -> backward(j--) 
        // TODO: find a more efficiently way to go through all staffs
        for (worker, j)
        {
            if (demandCount > 0)
            {
                // check total work day
                if (workDays[j] == dayCount - vacationCount)
                {
                    workSchedule[j][i] = 0;
                }

                // check conti work
                if (i >= 6)
                {
                    int contiWorkCount = 0;
                    for (six days before day i, k)
                    {
                        if (shift != 0)
                        {
                            contiWorkCount++;
                        }
                        else if (shift 0)
                        {
                            break;
                        }
                    }

                    if (contiWorkCount >= 6)
                    {
                        workSchedule[j][i] = 0;
                    }
                }

                ==========================================================================

                int isOvertime = checkOvertime(workSchedule, shiftTime, i, j);
                int bestShiftIdx = getBestShift(shiftTime, shiftCount, demand, isOvertime);
                int point = 0;
                for (time, k)
                {
                    // should work and has work to be done --> point++
                    if (shiftTime[bestShiftIdx][k] == 1 && demand[k] > 0)
                    {
                        point++;
                    }
                }
                
                // check overtime
                if (isOvertime != 0)
                {
                    // compare overtime and not overtime 's point
                    int newBestShiftIdx = getBestShift(shiftTime, shiftCount, demand, 0);
                    int newPoint = 0;
                    for (time, k)
                    {
                        // should work and has work to be done --> point++
                        if (shiftTime[bestShiftIdx][k] == 1 && demand[k] > 0)
                        {
                            newPoint++;
                        }
                    }

                    // compare
                    if (isNightShift && newPoint >= point + overTimeWeight)
                    {
                        point = newPoint;
                        bestShiftIdx = newBestShiftIdx;
                    }
                }

                // request
                if (noVacationWeight >= point)
                {
                    for (vacationRequest, k)
                    {
                        if (do have request)
                        {
                            workSchedule[j][i] = 0;
                        } 
                    }
                }
                
                // assign shift
                if (workSchedule[j][i] == -1)
                {
                    workSchedule[j][i] = bestShiftIdx;
                    workDays[j]++;
                    for (int k = 0; k < 24; k++)
                    {
                        if (shiftTime[bestShiftIdx][k] == 1)
                        {
                            demand[k]--;
                            demandCount--;
                        }
                    }
                }
            }
            else
            {
                // no work have to do then take a vacation
                workSchedule[j][i]= 0;
            }
        }

        // output
        for (int i = 0; i < staffCount; i++)
        {
            for (int j = 0; j < dayCount; j++)
            {
                if (j != dayCount -1 )
                {
                    cout << workSchedule[i][j] << ",";
                }
                else
                {
                    cout << workSchedule[i][j];
                }
            }
            cout << "\n";
        }
    }
}

getBestShift(const int shiftTime[30][24], const int shiftCount, int demand[24], int isOvertime)
{
    int maxIdx = -1, max = -1;
    for (shift, i)
    {
        int cur = 0;
        for (time, j)
        {
            if (demand[j] > 0 && shiftTime[i][j] == 1)
            {
                cur++;
            }
        }

        // pick shift which is not night shift 
        if (isOvertime != 0)
        {
            bool isNightShift = false;
            for (int j = 18; j <= 23; j++)
            {
                if (shiftTime[i][j] == 1)
                {
                    isNightShift = true;
                    break;
                }
            }
            maxIdx = (cur > max && !isNightShift) ? i : maxIdx;
            max = (cur > max && !isNightShift) ? cur : max;
        }
        else
        {
            maxIdx = (cur > max) ? i : maxIdx;
            max = (cur > max) ? cur : max;
        } 
    }
    return maxIdx;
}

int checkOvertime(const int workSchedule[100][31], const int shiftTime[30][24], const int day, const int staffIdx)
{
    int contiOvertime = 0;
    if (day >= 6)
    {
        for (six days before day, i)
        {
            int curShift = workSchedule[staffIdx][i];
            for (nightshift(18-23), j)
            {
                if (shiftTime[curShift][j] == 1)
                {
                    contiOvertime += 1;
                }
            }
        }

        return contiOvertime;
    }
    else
    {
       // no bigger than 6 
        for (int i = day - 1; i >= 0; i--)
        {
            int curShift = workSchedule[staffIdx][i];
            for (int j = 18; j <= 23; j++)
            {
                if (shiftTime[curShift][j] == 1)
                {
                    contiOvertime += 1;
                }
            }
        }
    }
}